{"ast":null,"code":"// api/new-meetup\nimport { MongoClient } from 'mongodb';\n\nasync function handler(req, res) {\n  if (req.method === 'POST') {\n    const data = req.body;\n    const {\n      title,\n      image,\n      descriptoin,\n      address\n    } = data;\n    const client = new MongoClient('mongodb+srv://Justin:MongoDB12@cluster0.gi7kf.mongodb.net/?retryWrites=true&w=majority');\n    console.log(\"test log====================\");\n    await client.connect();\n    const db = client.db('meetups');\n    const meetupsCollection = db.collection('meetups');\n    const result = await meetupsCollection.insertOne(data);\n    console.log(result);\n    client.close();\n    res.status(201).json({\n      message: \"meetup inserted\"\n    });\n  }\n} // import { MongoClient, ServerApiVersion } from 'mongodb'\n// const uri = \"mongodb+srv://Justin:MongoDB12@cluster0.gi7kf.mongodb.net/?retryWrites=true&w=majority\";\n// // Create a MongoClient with a MongoClientOptions object to set the Stable API version\n// const client = new MongoClient(uri, {\n//   serverApi: {\n//     version: ServerApiVersion.v1,\n//     strict: true,\n//     deprecationErrors: true,\n//   }\n// });\n// async function handler() {\n//     // Connect the client to the server\t(optional starting in v4.7)\n//     await client.connect();\n//     // Send a ping to confirm a successful connection\n//     await client.db(\"meetups\").command({ ping: 1 });\n//     console.log(\"Pinged your deployment. You successfully connected to MongoDB!\");\n//     // Ensures that the client will close when you finish/error\n//     await client.close();\n// }\n// handler().catch(console.dir);\n\n\nexport default handler;","map":{"version":3,"sources":["/Users/justinpettit/projects/Max/REACT/nextjs-meetups/pages/api/new-meetup.js"],"names":["MongoClient","handler","req","res","method","data","body","title","image","descriptoin","address","client","console","log","connect","db","meetupsCollection","collection","result","insertOne","close","status","json","message"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,SAA5B;;AAEA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/B,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,UAAMC,IAAI,GAAGH,GAAG,CAACI,IAAjB;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA,WAAhB;AAA6BC,MAAAA;AAA7B,QAAyCL,IAA/C;AAEA,UAAMM,MAAM,GAAG,IAAIX,WAAJ,CAAgB,wFAAhB,CAAf;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA,UAAMF,MAAM,CAACG,OAAP,EAAN;AACA,UAAMC,EAAE,GAAGJ,MAAM,CAACI,EAAP,CAAU,SAAV,CAAX;AACA,UAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,UAAMC,MAAM,GAAG,MAAMF,iBAAiB,CAACG,SAAlB,CAA4Bd,IAA5B,CAArB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYK,MAAZ;AACAP,IAAAA,MAAM,CAACS,KAAP;AACAjB,IAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACD;AACF,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;AAEA,eAAetB,OAAf","sourcesContent":["// api/new-meetup\nimport { MongoClient } from 'mongodb'\n\nasync function handler(req, res) {\n  if (req.method === 'POST') {\n    const data = req.body\n    const { title, image, descriptoin, address } = data\n    \n    const client = new MongoClient('mongodb+srv://Justin:MongoDB12@cluster0.gi7kf.mongodb.net/?retryWrites=true&w=majority')\n    console.log(\"test log====================\");\n    await client.connect()\n    const db = client.db('meetups')\n    const meetupsCollection = db.collection('meetups')\n    const result = await meetupsCollection.insertOne(data)\n    console.log(result);\n    client.close()\n    res.status(201).json({ message: \"meetup inserted\" })\n  }\n}\n\n// import { MongoClient, ServerApiVersion } from 'mongodb'\n// const uri = \"mongodb+srv://Justin:MongoDB12@cluster0.gi7kf.mongodb.net/?retryWrites=true&w=majority\";\n// // Create a MongoClient with a MongoClientOptions object to set the Stable API version\n// const client = new MongoClient(uri, {\n//   serverApi: {\n//     version: ServerApiVersion.v1,\n//     strict: true,\n//     deprecationErrors: true,\n//   }\n// });\n// async function handler() {\n\n//     // Connect the client to the server\t(optional starting in v4.7)\n//     await client.connect();\n//     // Send a ping to confirm a successful connection\n//     await client.db(\"meetups\").command({ ping: 1 });\n//     console.log(\"Pinged your deployment. You successfully connected to MongoDB!\");\n\n//     // Ensures that the client will close when you finish/error\n//     await client.close();\n\n// }\n// handler().catch(console.dir);\n\nexport default handler"]},"metadata":{},"sourceType":"module"}